{"version":3,"sources":["../public/web-player.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["deviceID","spotify_uri_num","player","SearchBar","props","state","term","search","bind","handleTermChange","handleKeyPress","this","onSearch","setState","event","target","value","key","className","placeholder","onChange","onKeyPress","onClick","React","Component","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","_token","access_token","console","log","join","onSpotifyPlayerAPIReady","Spotify","Player","name","getOAuthToken","cb","on","e","error","$","attr","track_window","current_track","album","images","url","text","data","device_id","connect","Track","currentlyPlaying","trackPaused","trackInProgress","addTrack","removeTrack","playTrack","pauseTrack","resumeTrack","isRemoval","isCleanSlate","track","uri","WebPlayer","class","onAdd","onRemove","clean","spotify_uri","data_info","ajax","type","beforeSend","xhr","setRequestHeader","success","pause","then","resume","id","renderActionLeft","src","cover","alt","artist","renderAction","TrackList","slateIsClean","cleanSlate","tracks","map","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistName","playlistTracks","onSave","accessToken","getAccessToken","hasAccessToken","href","match","hasExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","response","ok","json","jsonResponse","items","artists","preview","preview_url","savePlaylist","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","push","filter","current","Boolean","hostname","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43ad6400.chunk.js","sourcesContent":["export let deviceID;\r\nexport let spotify_uri_num\r\nlet player;\r\n\r\n// Get the hash of the url\r\nconst hash = window.location.hash\r\n.substring(1)\r\n.split('&')\r\n.reduce(function (initial, item) {\r\n  if (item) {\r\n    var parts = item.split('=');\r\n    initial[parts[0]] = decodeURIComponent(parts[1]);\r\n  }\r\n  return initial;\r\n}, {});\r\nwindow.location.hash = '';\r\n\r\n// Set token\r\nexport let _token = hash.access_token;\r\nconsole.log(_token);\r\n\r\nconst authEndpoint = 'https://accounts.spotify.com/authorize';\r\n\r\n// Replace with your app's client ID, redirect URI and desired scopes\r\nconst clientId = '28e3d5fbf78849fa82982068bf1f9589';\r\n//const redirectUri = 'http://vibemonk.surge.sh/';\r\nconst redirectUri = 'https://carsonkaylor1.github.io/VibeMonk/';\r\nconst scopes = [\r\n  'streaming',\r\n  'user-read-private',\r\n  'user-modify-playback-state',\r\n  \"user-read-email\",\r\n  'playlist-modify-public'\r\n];\r\n\r\n// If there is no token, redirect to Spotify authorization\r\nif (!_token) {\r\n  window.location = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\r\n}\r\n\r\n// Set up the Web Playback SDK\r\n\r\nwindow.onSpotifyPlayerAPIReady = () => {\r\n    player = new Spotify.Player({\r\n    name: 'Web Playback SDK Template',\r\n    getOAuthToken: cb => { cb(_token); }\r\n  });\r\n\r\n  // Error handling\r\n  player.on('initialization_error', e => console.error(e));\r\n  player.on('authentication_error', e => console.error(e));\r\n  player.on('account_error', e => console.error(e));\r\n  player.on('playback_error', e => console.error(e));\r\n\r\n  // Playback status updates\r\n  player.on('player_state_changed', state => {\r\n    console.log(state)\r\n    $('#current-track').attr('src', state.track_window.current_track.album.images[0].url);\r\n    $('#current-track-name').text(state.track_window.current_track.name);\r\n  });\r\n\r\n  // Ready\r\n  player.on('ready', data => {\r\n    deviceID = data.device_id;\r\n    // Play a track using our new device ID\r\n    //play(data.device_id);\r\n  });\r\n  // Connect to the player!\r\n  player.connect();\r\n}\r\n\r\n// Play a specified track on the Web Playback SDK's device ID\r\nexport function playTrack(device_id, spotify_uri) {\r\n  spotify_uri_num = spotify_uri\r\n  let data_info = '{\\\"uris\\\": [\\\"' + spotify_uri + '\\\"]}';\r\n  $.ajax({\r\n   url: \"https://api.spotify.com/v1/me/player/play?device_id=\" + device_id,\r\n   type: \"PUT\",\r\n   data: data_info,\r\n   beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + _token );},\r\n   success: function(data) { \r\n     console.log(data)\r\n   }\r\n  });\r\n}\r\n\r\nexport function pauseTrack(){\r\n  player.pause().then(() => {\r\n    console.log('Paused!');\r\n  });\r\n}\r\n\r\nexport function resumeTrack(){\r\n  player.resume();\r\n}\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: ''\r\n    };\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n  \r\n  // Sets the argument for the seearch method in App.js to the state of term\r\n  search() {\r\n    if (this.state.term){\r\n      this.props.onSearch(this.state.term);\r\n    }\r\n    else{\r\n      this.setState({\r\n        term: ''\r\n      });\r\n    }\r\n    \r\n  }\r\n  \r\n  // Sets the state of term to the value the user enters in input\r\n  handleTermChange(event) {\r\n    this.setState({ term: event.target.value });\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    if(event.key === 'Enter') {\r\n      this.search();\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return(\r\n      <div className=\"SearchBar\">\r\n        <input  placeholder=\"Enter A Song, Album, or Artist\"\r\n                onChange={this.handleTermChange}\r\n                onKeyPress={this.handleKeyPress} />\r\n        <a  onClick={this.search}>Search</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\nimport * as WebPlayer from '../../../public/web-player'\r\n\r\nclass Track extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentlyPlaying: false,\r\n            trackPaused: false,\r\n            trackInProgress: false\r\n        };\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n        this.playTrack = this.playTrack.bind(this);\r\n        this.pauseTrack = this.pauseTrack.bind(this);\r\n        this.resumeTrack = this.resumeTrack.bind(this);\r\n    }\r\n\r\n    renderActionLeft(){\r\n        if (this.props.isRemoval) { //track in playlist side\r\n            return <a className=\"removeTrack\" onClick={this.removeTrack}>-</a>\r\n        }\r\n        return(\r\n            <a className=\"addTrack\" onClick={this.addTrack}>+</a>\r\n        )\r\n    }\r\n\r\n\r\n    renderAction() {\r\n        if(this.props.isCleanSlate && !this.props.isRemoval){\r\n\r\n            if (this.props.track.uri == WebPlayer.spotify_uri_num){\r\n                if(!this.state.trackPaused)\r\n                return(\r\n                    <div className='buttons'>\r\n                        <a className=\"pauseButton\" onClick={this.pauseTrack}><i class=\"fas fa-pause\"></i></a>\r\n                    </div>\r\n                )\r\n                else{\r\n                    return(\r\n                        <div className='buttons'>\r\n                            <a className=\"resumeButton\" onClick={this.resumeTrack}><i className=\"fas fa-play\"></i></a>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n            else{\r\n                return(\r\n                    <div className='buttons'>\r\n                    <a className=\"playButton\" onClick={this.playTrack}><i className=\"fas fa-play\"></i></a>\r\n                    </div>\r\n                )\r\n            }\r\n        }  \r\n        \r\n    }\r\n\r\n    // Adds this.props.track as an argument to the addTrack method in App.js\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    // Adds this.props.track as an argument to the removeTrack method in App.js\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n    \r\n    playTrack(){\r\n\r\n        this.props.clean(true);\r\n        WebPlayer.playTrack(WebPlayer.deviceID, this.props.track.uri);\r\n        this.setState({\r\n            trackPaused: false,\r\n            trackInProgress: true\r\n        });        \r\n    }\r\n    pauseTrack(){\r\n        //this.props.clean(false);\r\n        WebPlayer.pauseTrack();\r\n        this.setState({\r\n            trackPaused: true\r\n        })\r\n    }\r\n    resumeTrack(){\r\n        WebPlayer.resumeTrack();\r\n        this.setState({\r\n            trackPaused: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Track\" key={this.props.track.id}>\r\n                {this.renderActionLeft()}\r\n                <div className=\"Track-cover-preview\">\r\n                    <img className=\"Track-album-cover\" src={this.props.track.cover} alt=\"album cover\"/>\r\n                </div>\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            slateIsClean: true\r\n        }\r\n        this.cleanSlate = this.cleanSlate.bind(this);\r\n    }\r\n\r\n    cleanSlate(value){\r\n        console.log(value);\r\n        this.setState({\r\n            slateIsClean: value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track   key={track.id}\r\n                                        track={track}\r\n                                        onAdd={this.props.onAdd}\r\n                                        onRemove={this.props.onRemove}\r\n                                        isRemoval={this.props.isRemoval}\r\n                                        tracks={this.props.tracks}\r\n                                        clean={this.cleanSlate}\r\n                                        isCleanSlate={this.state.slateIsClean}/>\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList  tracks={this.props.searchResults}\r\n                            onAdd={this.props.onAdd}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResults;","\r\nimport React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList'\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n    \r\n    // Updates Playlist name to value user inputs\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input  defaultValue={this.props.playlistName}\r\n                        onChange={this.handleNameChange}/>\r\n                    <TrackList  tracks={this.props.playlistTracks}\r\n                                isRemoval={true}\r\n                                onRemove={this.props.onRemove}/>\r\n                <a  className=\"Playlist-save\" \r\n                    onClick={this.props.onSave}>Save to Spotify</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist;","import * as WebPlayer from '../../public/web-player'\r\nconst clientId = '28e3d5fbf78849fa82982068bf1f9589';\r\n//const redirectUri = 'http://vibemonk.surge.sh/';\r\n//const redirectUri = 'http://localhost:3000/';\r\nconst redirectUri = 'https://carsonkaylor1.github.io/VibeMonk/';\r\nlet accessToken = WebPlayer._token;\r\n\r\nconst Spotify = {\r\n\r\n    // Gets access token from Spotify\r\n    getAccessToken() {\r\n        if(accessToken) {\r\n            return accessToken;\r\n        }\r\n        const hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\r\n        const hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n        if (hasAccessToken && hasExpiresIn) {\r\n            accessToken = hasAccessToken[1];\r\n            const expiresIn = Number(hasExpiresIn[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&scope=streaming&scope=user-read-private&scope=user-modify-playback-state&scope=user-read-birthdate&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    // Uses access token to return a response from the Spoitify API using user serach term from SearchBar\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        console.log(accessToken);\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(\r\n            response => { \r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    console.log('API request failed');\r\n                }\r\n        }).then(\r\n            jsonResponse => {\r\n            if(!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri,\r\n                cover: track.album.images[2].url,\r\n                preview: track.preview_url,\r\n            }));\r\n        });\r\n    },\r\n\r\n    // Gets a user's ID from Spotify, creates a new playlist on user's account, and adds tracks to that playlist\r\n    savePlaylist(playlistName, trackURIs) {\r\n        if (!playlistName || !trackURIs.length) {\r\n            return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {\r\n            Authorization: `Bearer ${accessToken}`\r\n        };\r\n        let userId;\r\n\r\n        // Return user's ID from Spotify API\r\n        return fetch('https://api.spotify.com/v1/me', {\r\n            headers: headers\r\n        }).then(\r\n            response => {\r\n                if(response.ok) {\r\n                    return response.json();\r\n                } \r\n        }).then(\r\n            jsonResponse => {\r\n                userId = jsonResponse.id;\r\n\r\n                // Adds playlist to user's account\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({name: playlistName})\r\n                }).then(\r\n                    response => {\r\n                    if (response.ok) {\r\n                        return response.json();\r\n                    } else {\r\n                        console.log('API request failed');\r\n                    }\r\n                }).then(\r\n                    jsonResponse => {\r\n                        const playlistId = jsonResponse.id;\r\n\r\n                        // Adds tracks to new playlist \r\n                        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                            headers: headers,\r\n                            method: 'POST',\r\n                            body: JSON.stringify({ uris: trackURIs})\r\n                        });\r\n                    });\r\n            });\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n  }\n  \n  // Adds track from Search Results to Playlist\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  // Removes track from Playlist by filtering out track id from playlistTracks\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(current => current.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  // Sends search term request to spotify and returns results of search in the search results panel\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    });\n  }\n\n  // Updates the name of the Playlist\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  // Saves playlist name and tracks to user's account\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlists',\n        playlistTracks: []\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"title_div\">\n            <h1>Vibe<span className=\"highlight\">Monk</span></h1>\n            <div>\n            <img className='monk_pic' src='https://i.imgur.com/YQz2haw.png' alt='monk image'/>\n            </div>\n        </div>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} \n                           onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName} \n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n// let backgroundColor = '#ffffff'\n\n// document.body.style.background = backgroundColor;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}